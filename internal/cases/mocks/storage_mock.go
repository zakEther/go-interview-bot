// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/cases/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/zakether/go-interview-bot/internal/entities"
)

// MockSessionStorage is a mock of SessionStorage interface.
type MockSessionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStorageMockRecorder
}

// MockSessionStorageMockRecorder is the mock recorder for MockSessionStorage.
type MockSessionStorageMockRecorder struct {
	mock *MockSessionStorage
}

// NewMockSessionStorage creates a new mock instance.
func NewMockSessionStorage(ctrl *gomock.Controller) *MockSessionStorage {
	mock := &MockSessionStorage{ctrl: ctrl}
	mock.recorder = &MockSessionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStorage) EXPECT() *MockSessionStorageMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionStorage) CreateSession(session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionStorageMockRecorder) CreateSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionStorage)(nil).CreateSession), session)
}

// GetRandomQuestions mocks base method.
func (m *MockSessionStorage) GetRandomQuestions(numQuestions int) ([]entities.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuestions", numQuestions)
	ret0, _ := ret[0].([]entities.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuestions indicates an expected call of GetRandomQuestions.
func (mr *MockSessionStorageMockRecorder) GetRandomQuestions(numQuestions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuestions", reflect.TypeOf((*MockSessionStorage)(nil).GetRandomQuestions), numQuestions)
}

// SaveSession mocks base method.
func (m *MockSessionStorage) SaveSession(session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockSessionStorageMockRecorder) SaveSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockSessionStorage)(nil).SaveSession), session)
}

// SessionByID mocks base method.
func (m *MockSessionStorage) SessionByID(sessionID int) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionByID", sessionID)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionByID indicates an expected call of SessionByID.
func (mr *MockSessionStorageMockRecorder) SessionByID(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionByID", reflect.TypeOf((*MockSessionStorage)(nil).SessionByID), sessionID)
}

// SubmitUserAnswers mocks base method.
func (m *MockSessionStorage) SubmitUserAnswers(session *entities.Session, answers []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitUserAnswers", session, answers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitUserAnswers indicates an expected call of SubmitUserAnswers.
func (mr *MockSessionStorageMockRecorder) SubmitUserAnswers(session, answers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitUserAnswers", reflect.TypeOf((*MockSessionStorage)(nil).SubmitUserAnswers), session, answers)
}
