package telegram

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/rs/zerolog/log"
	"github.com/zakether/go-interview-bot/internal/entities"
	"go.uber.org/zap"
)

func (b *Bot) start(request tgbotapi.Update) {
	chatID := request.Message.Chat.ID
	message := "–£ –í–∞—Å –±—É–¥–µ—Ç 7 –º–∏–Ω—É—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 15 –≤–æ–ø—Ä–æ—Å–æ–≤\n" +
		"–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ - /help\n" +
		"–ù–∞–∂–º–∏—Ç–µ /test –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
	b.sendMsg(chatID, message)
}

func (b *Bot) help(request tgbotapi.Update) {
	chatID := request.Message.Chat.ID
	message := "ü§ñ–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —è–∑—ã–∫—É Go\n" +
		"–£ –í–∞—Å –±—É–¥–µ—Ç 7 –º–∏–Ω—É—Ç –¥–ª—è —Å–¥–∞—á–∏ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n" +
		"‚ùì<b>–ö–∞–∫ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?</b>\n" +
		"1. –ù–∞–∂–∏–º–∞–µ—Ç–µ –Ω–∞ /test\n" +
		"2. –í—ã–±–∏—Ä–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç\n\n" +
		"3. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É - –ø–∏—à–∏—Ç–µ @zakether\n\n" +
		"üåü–£–¥–∞—á–∏"

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "HTML"
	b.bot.Send(msg)
}

func (b *Bot) test(request tgbotapi.Update) {
	chatID := request.Message.Chat.ID
	userID := int64(request.Message.From.ID)

	session, err := b.questionService.StartTest(userID)
	if err != nil {
		b.sendMsg(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
		b.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", zap.Error(err))
		return
	}

	session.ExpiredAt = time.Now().Add(7 * time.Minute)
	session.CurrentQuestionIndex = 0
	b.sessions[chatID] = session

	b.logger.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
	b.sendQuestion(chatID, session)
	b.sendRemainingTime(chatID, &session)
}

func (b *Bot) defaultMsg(request tgbotapi.Update) {
	msg := "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ö–ª–∏–∫–Ω–∏ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥"
	b.sendMsg(request.Message.Chat.ID, msg)
}

func (b *Bot) sendMsg(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.bot.Send(msg)
	if err != nil {
		log.Error().Err(err).Msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
	}
}

func (b *Bot) handleCallbackQuery(chatID int64, data string, session *entities.Session) {
	switch {
	case data == "submit":
		b.logger.Info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞", zap.Int64("userID", session.UserID))
		score, _, err := b.questionService.GetResult(session, session.UserAnswers)
		if err != nil {
			b.logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞", zap.Error(err))
			b.sendMsg(chatID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞.")
			return
		}
		resultMsg := fmt.Sprintf("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %d", score)
		b.sendMsg(chatID, resultMsg)

		button := tgbotapi.NewInlineKeyboardButtonData("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", "show_answers")
		keyboard := tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
		msg := tgbotapi.NewMessage(chatID, "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
		msg.ReplyMarkup = keyboard
		b.bot.Send(msg)

		b.sessions[chatID] = *session

	default:
		if strings.HasPrefix(data, "answer_") {
			parts := strings.Split(data, "_")
			if len(parts) == 3 {
				questionID, err1 := strconv.Atoi(parts[1])
				answerIndex, err2 := strconv.Atoi(parts[2])
				if err1 == nil && err2 == nil {
					b.logger.Info("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω", zap.Int("questionID", questionID), zap.Int("answerIndex", answerIndex))
					session.UserAnswers[session.CurrentQuestionIndex] = answerIndex
					session.CurrentQuestionIndex++
					b.sessions[chatID] = *session

					if session.CurrentQuestionIndex < len(session.Questions) {
						b.sendQuestion(chatID, *session)
						b.sendRemainingTime(chatID, session)
					} else {
						b.handleCallbackQuery(chatID, "submit", session)
					}
				}
			}
		}
	}
}

func (b *Bot) handleShowAnswers(update tgbotapi.Update) {
	chatID := update.CallbackQuery.Message.Chat.ID

	session, ok := b.sessions[chatID]
	if !ok {
		b.sendMsg(chatID, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
		return
	}

	var results []string
	for i, answerIndex := range session.UserAnswers {
		correctAnswerIndex := session.Questions[i].GetAnswer()
		if answerIndex != correctAnswerIndex {
			question := session.Questions[i]
			result := fmt.Sprintf(
				"***–í–æ–ø—Ä–æ—Å:*** %s\n***–í–∞—à –æ—Ç–≤–µ—Ç:*** %s\n***–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:*** %s\n***–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:*** %s\n",
				question.GetText(),
				question.GetQuestionOptions()[answerIndex],
				question.GetQuestionOptions()[correctAnswerIndex],
				question.Explanation)
			results = append(results, result)
		}
	}

	if len(results) == 0 {
		b.sendMsg(chatID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ.")
	} else {
		for _, result := range results {
			msg := tgbotapi.NewMessage(chatID, result)
			msg.ParseMode = tgbotapi.ModeMarkdown
			b.bot.Send(msg)
		}
	}
}

func (b *Bot) sendRemainingTime(chatID int64, session *entities.Session) {
	timeLeft := time.Until(session.ExpiredAt)
	minutes := int(timeLeft.Minutes())
	seconds := int(timeLeft.Seconds()) % 60

	timeLeftMsg := fmt.Sprintf("–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: %d–º %d—Å", minutes, seconds)
	b.sendMsg(chatID, timeLeftMsg)
}
